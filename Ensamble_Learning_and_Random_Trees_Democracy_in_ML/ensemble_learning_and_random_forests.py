# -*- coding: utf-8 -*-
"""lab06 (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aEoFT1gar7kh8TX3itQmnjSqQO6qtmRZ

# Ensemble learning and random forests - democracy in Machine Learning

## 1. Data import

**In this notebook we will use the Wisconsin Breast Cancer dataset available in sklearn.datasets module**

**For simplicity and visualization purposes, we will focus on two features:**
- `mean texture`
- `mean symmetry`

**Our goal is to classify tumors as `malignant` or `benign` using ensemble methods.**

**This project aims to demonstrate how `ensemble learning`, by combining multiple weak or individual models, can produce **stronger and more reliable predictions** than those obtained from any single model alone.   We will compare various ensemble strategies to see how they improve performance and generalization.**
"""

from sklearn import datasets

data_breast_cancer = datasets.load_breast_cancer(as_frame=True)
print(data_breast_cancer['DESCR'])

df_data_breast_cancer = data_breast_cancer.frame
df_data_breast_cancer.head(10)

from sklearn.model_selection import train_test_split

X = df_data_breast_cancer.iloc[:,:-1]
y = df_data_breast_cancer['target']
X = X[["mean texture", "mean symmetry"]]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle = True)

results_list = []
models_list = []

"""# 2. Base Classifiers and Voting Ensembles

## We start by training three basic classifiers:


**k-Nearest Neighbors (k-NN)**
"""

import sklearn.neighbors
from sklearn.metrics import accuracy_score

knn_5_clf = sklearn.neighbors.KNeighborsClassifier() # n_neighbors = 5 by default
knn_5_clf.fit(X_train, y_train)

y_train_pred = knn_5_clf.predict(X_train)
y_test_pred = knn_5_clf.predict(X_test)
acc_train = accuracy_score(y_train_pred, y_train)
acc_test = accuracy_score(y_test_pred, y_test)
print(acc_train)
print(acc_test)

results_list.append((acc_train, acc_test))
models_list.append(knn_5_clf)

"""**Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier

tree_clf = DecisionTreeClassifier() # by default max_depth is as big as possible (till improvement in split clarity improves)
tree_clf.fit(X_train, y_train)

y_train_pred = tree_clf.predict(X_train)
y_test_pred = tree_clf.predict(X_test)
acc_train = accuracy_score(y_train_pred, y_train)
acc_test = accuracy_score(y_test_pred, y_test)
print(acc_train)
print(acc_test)

results_list.append((acc_train, acc_test))
models_list.append(tree_clf)

"""**Logistic Regression**"""

from sklearn.linear_model import LogisticRegression

log_clf = LogisticRegression() # default = 'lbfgs'
log_clf.fit(X_train, y_train)

y_train_pred = log_clf.predict(X_train)
y_test_pred = log_clf.predict(X_test)
acc_train = accuracy_score(y_train_pred, y_train)
acc_test = accuracy_score(y_test_pred, y_test)
print(acc_train)
print(acc_test)

results_list.append((acc_train, acc_test))
models_list.append(log_clf)

"""## We then build two voting classifiers:

**Hard voting: predicts the class label that gets the most votes.**
"""

from sklearn.ensemble import VotingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier


log_clf = LogisticRegression()
tree_clf = DecisionTreeClassifier()
knn_5_clf = KNeighborsClassifier()

voting_clf = VotingClassifier(
    estimators=[('lr', log_clf),
                ('tc', tree_clf),
                ('svc', knn_5_clf)],
    voting='hard')

voting_clf.fit(X_train, y_train)


y_train_pred = voting_clf.predict(X_train)
y_test_pred = voting_clf.predict(X_test)
acc_train = accuracy_score(y_train_pred, y_train)
acc_test = accuracy_score(y_test_pred, y_test)
print(acc_train)
print(acc_test)

results_list.append((acc_train, acc_test))
models_list.append(voting_clf)

"""**Soft voting: averages the predicted class probabilities.**"""

from sklearn.ensemble import VotingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier


log_clf = LogisticRegression()
tree_clf = DecisionTreeClassifier()
knn_5_clf = KNeighborsClassifier()

voting_clf = VotingClassifier(
    estimators=[('lr', log_clf),
                ('tc', tree_clf),
                ('svc', knn_5_clf)],
    voting='soft')

voting_clf.fit(X_train, y_train)


y_train_pred = voting_clf.predict(X_train)
y_test_pred = voting_clf.predict(X_test)
acc_train = accuracy_score(y_train_pred, y_train)
acc_test = accuracy_score(y_test_pred, y_test)
print(acc_train)
print(acc_test)

results_list.append((acc_train, acc_test))
models_list.append(voting_clf)

"""## ðŸ§¾ Summary of Base Classifiers and Voting Ensemble Results

After training and evaluating individual classifiers and their ensemble combinations, we observed the following:

- The individual classifiers (Decision Tree, Logistic Regression, k-NN) performed moderately well on their own.
- The **Hard Voting** ensemble often outperforms the worst individual models by relying on majority consensus.
- The **Soft Voting** ensemble generally yields the best performance, as it takes into account the prediction confidence (probabilities) of each model.

These results demonstrate the power of ensemble learning â€” **aggregating multiple models helps reduce variance and improve generalization**, especially when the models are diverse and make different kinds of errors.

**saving the results to pickle file**
"""

import pickle

with open('acc_vote.pkl', 'wb') as f:
    pickle.dump(results_list, f)

with open('vote.pkl', 'wb') as f:
    pickle.dump(models_list, f)

"""# 3. Random Forests and Boosting algorithms

##  Bagging, Pasting and Random Forest â€“ Parallel Ensemble Methods

### Now we train several ensemble models based on **parallel aggregation of multiple estimators**, using Decision Trees as the base learners:

**Bagging (Bootstrap Aggregating): trains each tree on a random subset of the training data with replacement**
"""

from sklearn.ensemble import BaggingClassifier
from sklearn.tree import DecisionTreeClassifier

results_list = []
models_list = []


# DecisionTreeClassifier(), n_estimators=500, max_samples=100, bootstrap=True, random_state=42
bag_clf = BaggingClassifier(DecisionTreeClassifier(), n_estimators=30) #by defualt bootstrap = True
bag_clf.fit(X_train, y_train)

y_train_pred = bag_clf.predict(X_train)
y_test_pred = bag_clf.predict(X_test)
acc_train = accuracy_score(y_train_pred, y_train)
acc_test = accuracy_score(y_test_pred, y_test)

print(acc_train)
print(acc_test)

results_list.append((acc_train, acc_test))
models_list.append(bag_clf)

"""**Bagging (50%): similar to standard Bagging but uses only 50% of the data per tree**"""

from sklearn.ensemble import BaggingClassifier
from sklearn.tree import DecisionTreeClassifier

# DecisionTreeClassifier(), n_estimators=500, max_samples=100, bootstrap=True, random_state=42
bag_clf = BaggingClassifier(DecisionTreeClassifier(), n_estimators=30, max_samples = 0.5) #by defualt bootstrap = True
bag_clf.fit(X_train, y_train)

y_train_pred = bag_clf.predict(X_train)
y_test_pred = bag_clf.predict(X_test)
acc_train = accuracy_score(y_train_pred, y_train)
acc_test = accuracy_score(y_test_pred, y_test)

print(acc_train)
print(acc_test)

results_list.append((acc_train, acc_test))
models_list.append(bag_clf)

"""**Pasting: same as Bagging but the data subsets are sampled without replacement**"""

from sklearn.ensemble import BaggingClassifier
from sklearn.tree import DecisionTreeClassifier

# DecisionTreeClassifier(), n_estimators=500, max_samples=100, bootstrap=True, random_state=42
bag_clf = BaggingClassifier(DecisionTreeClassifier(), n_estimators=30, bootstrap = False) #by defualt bootstrap = True
bag_clf.fit(X_train, y_train)

y_train_pred = bag_clf.predict(X_train)
y_test_pred = bag_clf.predict(X_test)
acc_train = accuracy_score(y_train_pred, y_train)
acc_test = accuracy_score(y_test_pred, y_test)

print(acc_train)
print(acc_test)

results_list.append((acc_train, acc_test))
models_list.append(bag_clf)

"""**Pasting (50%): Pasting using only 50% of the data per tree**"""

from sklearn.ensemble import BaggingClassifier
from sklearn.tree import DecisionTreeClassifier

# DecisionTreeClassifier(), n_estimators=500, max_samples=100, bootstrap=True, random_state=42
bag_clf = BaggingClassifier(DecisionTreeClassifier(), n_estimators=30, max_samples = 0.5, bootstrap = False) #by defualt bootstrap = True
bag_clf.fit(X_train, y_train)

y_train_pred = bag_clf.predict(X_train)
y_test_pred = bag_clf.predict(X_test)
acc_train = accuracy_score(y_train_pred, y_train)
acc_test = accuracy_score(y_test_pred, y_test)

print(acc_train)
print(acc_test)

results_list.append((acc_train, acc_test))
models_list.append(bag_clf)

"""**Random Forest: an extension of Bagging where, in addition to bootstrapping samples, each split in the tree considers only a random subset of features**  
Trees in Random Forest choose the best feautre-split but only based on the currently chosen (randomly) subset of features

"""

from sklearn.ensemble import RandomForestClassifier

# n_estimators=500, max_leaf_nodes=16, random_state=42
rnd_clf = RandomForestClassifier(n_estimators=30) # by default, max_samples = 1.0, boostrap = True,  n_jobs = -1
rnd_clf.fit(X_train, y_train)

y_train_pred = rnd_clf.predict(X_train)
y_test_pred = rnd_clf.predict(X_test)
acc_train = accuracy_score(y_train_pred, y_train)
acc_test = accuracy_score(y_test_pred, y_test)

print(acc_train)
print(acc_test)

results_list.append((acc_train, acc_test))
models_list.append(rnd_clf)

"""### These methods aim to **reduce model variance** by averaging predictions from weak learners trained on different data subsets. This makes the final model more robust and less prone to overfitting.

##  AdaBoost and Gradient Boosting â€“ Sequential Ensemble Methods

Next, we apply **boosting** techniques, which combine multiple weak learners trained sequentially:

**AdaBoost: focuses on the samples that were misclassified by previous estimators. It adjusts the weights of training examples to prioritize harder cases.**
"""

from sklearn.ensemble import AdaBoostClassifier

ada_clf = AdaBoostClassifier(DecisionTreeClassifier(), n_estimators= 30)
ada_clf.fit(X_train, y_train)

y_train_pred = ada_clf.predict(X_train)
y_test_pred = ada_clf.predict(X_test)
acc_train = accuracy_score(y_train_pred, y_train)
acc_test = accuracy_score(y_test_pred, y_test)

print(acc_train)
print(acc_test)

results_list.append((acc_train, acc_test))
models_list.append(ada_clf)

"""**Gradient Boosting: fits each new estimator to the residual errors of the current model using gradient descent. Each tree attempts to correct the mistakes of the entire ensemble so far.**"""

from sklearn.ensemble import GradientBoostingClassifier

gbrt_clf = GradientBoostingClassifier(n_estimators= 30) # uses decision trees (only)
gbrt_clf.fit(X_train, y_train)

y_train_pred = gbrt_clf.predict(X_train)
y_test_pred = gbrt_clf.predict(X_test)
acc_train = accuracy_score(y_train_pred, y_train)
acc_test = accuracy_score(y_test_pred, y_test)

print(acc_train)
print(acc_test)

results_list.append((acc_train, acc_test))
models_list.append(gbrt_clf)

"""**Boosting** methods are powerful for achieving **high accuracy** by focusing on hard-to-predict examples.
- Both **AdaBoost** and **Gradient Boosting** reduce **bias** but are more sensitive to **noise** compared to methods like Random Forest.
- They require careful **hyperparameter tuning**, especially in **Gradient Boosting**, to avoid overfitting and to optimize performance.

**saving the results to pickle file**
"""

import pickle

with open('acc_bag.pkl', 'wb') as f:
    pickle.dump(results_list, f)

with open('bag.pkl', 'wb') as f:
    pickle.dump(models_list, f)

"""## Feature Sampling in Bagging

The **`max_features`** parameter is a crucial tool for increasing the independence of the trees in the ensemble. By randomly selecting different subsets of features, we ensure that the trees do not learn the same decision rules, improving the robustness of the overall model.
"""

from sklearn.model_selection import train_test_split

X = df_data_breast_cancer.iloc[:,:-1]
y = df_data_breast_cancer['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle = True)

from sklearn.ensemble import BaggingClassifier
from sklearn.tree import DecisionTreeClassifier

bag_clf = BaggingClassifier(
    DecisionTreeClassifier(),
    n_estimators=30,
    max_samples=0.5,      # half of data for every tree
    bootstrap=True,       # samples chosen with repetition (data sample can be chosen twice for the same tree)
    max_features=2,       # decision tree can split by only two of randomly chosen features before tree creation (instead of all, as by default)
    bootstrap_features=False,  # decisive-features cannot be chosen with repetition (same decisive-feature cannot be chosen twice for the same tree)
)
bag_clf.fit(X_train, y_train)

y_train_pred = bag_clf.predict(X_train)
y_test_pred = bag_clf.predict(X_test)
acc_train = accuracy_score(y_train_pred, y_train)
acc_test = accuracy_score(y_test_pred, y_test)

print(acc_train)
print(acc_test)

results_list = []
models_list = []

results_list.append(acc_train)
results_list.append(acc_test)
models_list.append(bag_clf)

"""**saving the results to pickle file**"""

import pickle

with open('acc_fea.pkl', 'wb') as f:
    pickle.dump(results_list, f)

with open('fea.pkl', 'wb') as f:
    pickle.dump(models_list, f)

"""In this part of the code, we are evaluating each individual estimator within the Bagging ensemble. Specifically, we look at:

1. **Selected Features**: For each estimator, we identify which features were selected for training the decision tree.
2. **Training and Testing Accuracy**: For each tree, we calculate the accuracy on both the training and test sets based on the selected features.
"""

# list of names of columns
feature_names = X.columns

# we crate a rank list
ranking = []

rnd_clf = RandomForestClassifier(n_estimators=30) # by default, max_samples = 1.0, boostrap = True,  n_jobs = -1
rnd_clf.fit(X_train, y_train)

for est, feat_idxs in zip(bag_clf.estimators_, bag_clf.estimators_features_): #estimator _features works if we trained RandomForest earlier
    selected_features = feature_names[list(feat_idxs)]

    X_train_sub = X_train[selected_features]
    X_test_sub = X_test[selected_features]

    acc_train = accuracy_score(y_train, est.predict(X_train_sub))
    acc_test = accuracy_score(y_test, est.predict(X_test_sub))

    ranking.append({
        "train_acc": acc_train,
        "test_acc": acc_test,
        "features": list(selected_features)
    })

# we sort the created dataframe
import pandas as pd

df_rank = pd.DataFrame(ranking)
df_rank = df_rank.sort_values(by=["test_acc", "train_acc"], ascending=False)

# saving data to pickle file
with open("acc_fea_rank.pkl", "wb") as f:
    pickle.dump(df_rank, f)

"""**The output shows the ranking of different decision trees within the Bagging ensemble, sorted by their `test accuracy` and `training accuracy`**."""

print(df_rank)

"""## ðŸ“Œ Summary

In this exercise, we explored the power of **ensemble methods** like **Bagging** with **Decision Trees**. By utilizing different subsets of features and data for each tree, we were able to reduce variance and improve model generalization.

- **Feature selection**: The models showed that certain features (e.g., `worst area`, `mean texture`, `mean radius`) have a significant impact on prediction accuracy.
- **Performance**: We observed that ensemble models outperformed individual decision trees by reducing overfitting and improving overall accuracy on the test set.
  
This approach demonstrates how combining multiple models with diverse perspectives can lead to more robust and reliable predictions, especially in complex tasks like tumor classification.

"""